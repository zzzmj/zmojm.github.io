{"version":3,"sources":["service/question.js","service/exam.js","feature/xingce/components/Answer.jsx","service/collect.js","feature/xingce/components/CollectIcon.jsx","feature/xingce/XingCeList.jsx","service/index.js"],"names":["getQuestionList","questionIds","query","LC","Query","limit","containedIn","find","existQuestion","objectId","equalTo","addQuestion","data","list","forEach","item","question","Object","extend","keys","key","set","push","saveAll","updateQuestionNotes","notes","createWithoutData","save","addCategoryQuestion","getCategoryQuestion","get","addCustomWrongQuestionCategory","getCustomWrongQuestionCategory","getExamList","getBookList","skip","addExam","Answer","props","correctAnswer","solution","keypoints","questionMeta","source","id","mapIndexToLetter","useEffect","console","log","className","onClick","onClose","dangerouslySetInnerHTML","__html","map","index","color","name","correctRatio","toFixed","mostWrongAnswer","choice","onChange","getCollectList","addCollect","deleteCollect","destroy","CollectIcon","url","checked","src","alt","XingCeList","editorRef","useRef","params","useParams","useState","activeNotes","setActiveNotes","loading","setLoading","isModalVisible","setIsModalVisible","categoryList","setCategoryList","collectMap","setCollectMap","dataSource","setDataSource","then","res","toJSON","content","getCollect","includes","getQuestions","length","getQuestionIds","callback","i","children","message","error","getAllData","a","examData","questionData","bookData","result","qId","split","filter","parseInt","catch","err","newMap","handleNotesChange","current","setContent","window","getAnswer","left","stringArr","answer","pos","count","wrong","qIds","arr","charCodeAt","p","join","layout","itemLength","accessories","options","len","Math","max","cls","classNames","status","answerVisible","success","handleCollect","option","selectIndex","optionCls","questionId","newDataSource","handleSelectOption","handleClose","forceRender","width","title","visible","onOk","getContent","onCancel","onInit","evt","editor","apiKey","init","height","menubar","plugins","toolbar","content_style","appId","appKey","serverURL"],"mappings":"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","file":"static/js/17.16cc6ed4.chunk.js","sourcesContent":["import LC from './index'\r\n\r\nexport const getQuestionList = questionIds => {\r\n    const query = new LC.Query('Question')\r\n    // query.descending('createdAt')\r\n    query.limit(1000)\r\n    if (questionIds) {\r\n        query.containedIn('id', questionIds)\r\n    }\r\n    return query.find()\r\n}\r\n\r\nexport const existQuestion = objectId => {\r\n    const query = new LC.Query('Question')\r\n    if (typeof objectId === 'object') {\r\n        query.containedIn('id', objectId)\r\n    } else {\r\n        query.equalTo('id', objectId)\r\n    }\r\n    query.limit(1000)\r\n    return query.find()\r\n}\r\n\r\n// 新增题目到leanCloud\r\nexport const addQuestion = data => {\r\n    const list = []\r\n    data.forEach(item => {\r\n        const Question = LC.Object.extend('Question')\r\n        const question = new Question()\r\n        Object.keys(item).forEach(key => {\r\n            question.set(key, item[key])\r\n        })\r\n        list.push(question)\r\n    })\r\n    return LC.Object.saveAll(list)\r\n}\r\n\r\nexport const updateQuestionNotes = (objectId, notes) => {\r\n    const q = LC.Object.createWithoutData('QuestionBook', objectId)\r\n    // 更新笔记\r\n    return q.save({ notes })\r\n}\r\n\r\n// delete\r\nexport const deleteQuestion = objectId => {\r\n    const question = LC.Object.createWithoutData('Question', objectId)\r\n    return question.destroy()\r\n}\r\n\r\n// 这是粉笔错题分类表\r\n// 种类表添加种类\r\nexport const addCategoryQuestion = data => {\r\n    let question = LC.Object.createWithoutData(\r\n        'Category',\r\n        '62031ff0a10bf856ff93cf99'\r\n    )\r\n    Object.keys(data).forEach(key => {\r\n        question.set(key, data[key])\r\n    })\r\n    return question.save()\r\n}\r\n\r\nexport const getCategoryQuestion = objectId => {\r\n    const query = new LC.Query('Category')\r\n    return query.get(objectId || '62031ff0a10bf856ff93cf99')\r\n}\r\n\r\n// 自定义错题分类表\r\nexport const addCustomWrongQuestionCategory = data => {\r\n    let question = LC.Object.createWithoutData(\r\n        'Category',\r\n        '6253f0461122b910ec5dfd1e'\r\n    )\r\n    Object.keys(data).forEach(key => {\r\n        question.set(key, data[key])\r\n    })\r\n    return question.save()\r\n}\r\n\r\nexport const getCustomWrongQuestionCategory = () => {\r\n    const query = new LC.Query('Category')\r\n    return query.get('6253f0461122b910ec5dfd1e')\r\n}\r\n","import LC from './index'\r\n\r\nexport const getExamList = questionIds => {\r\n    const query = new LC.Query('FbQuestion')\r\n    // query.descending('createdAt')\r\n    query.limit(1000)\r\n    if (questionIds) {\r\n        query.containedIn('id', questionIds)\r\n    }\r\n    return query.find()\r\n}\r\n\r\nexport const getBookList = (questionIds, skip) => {\r\n    const query = new LC.Query('QuestionBook')\r\n    // query.descending('createdAt')\r\n    query.limit(1000)\r\n    if (skip) {\r\n        query.skip(skip)\r\n    }\r\n    if (questionIds) {\r\n        query.containedIn('id', questionIds)\r\n    }\r\n    return query.find()\r\n}\r\n\r\nexport const addExam = data => {\r\n    const list = []\r\n    data.forEach(item => {\r\n        const Question = LC.Object.extend('FbQuestion')\r\n        const question = new Question()\r\n        Object.keys(item).forEach(key => {\r\n            question.set(key, item[key])\r\n        })\r\n        list.push(question)\r\n    })\r\n    return LC.Object.saveAll(list)\r\n}\r\n\r\n// delete\r\nexport const deleteExam = objectId => {\r\n    const question = LC.Object.createWithoutData('FbQuestion', objectId)\r\n    return question.destroy()\r\n}\r\n","// 答案组件\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Divider, Tag } from 'antd'\r\nimport './Answer.scss'\r\n\r\nconst Answer = props => {\r\n    const {\r\n        correctAnswer,\r\n        solution,\r\n        keypoints,\r\n        questionMeta,\r\n        source,\r\n        id,\r\n        notes,\r\n    } = props.data\r\n\r\n    const mapIndexToLetter = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n    const handleClick = () => {\r\n        props.onClose()\r\n    }\r\n\r\n    useEffect(() => {}, [])\r\n\r\n    const handleClickNotes = () => {\r\n        props.onChange && props.onChange(props.data)\r\n    }\r\n    console.log('keypoints', keypoints, props.data)\r\n    return (\r\n        <div className='answer'>\r\n            <div className='correct'>\r\n                <p>\r\n                    正确答案是：\r\n                    <span>{mapIndexToLetter[correctAnswer['choice']]}</span>\r\n                </p>\r\n\r\n                <Button onClick={handleClick}>收起</Button>\r\n            </div>\r\n            <Divider />\r\n            <ul>\r\n                <li>\r\n                    <span>解析：</span>\r\n                    <div\r\n                        className='content'\r\n                        dangerouslySetInnerHTML={{ __html: solution }}\r\n                    ></div>\r\n                </li>\r\n                <li>\r\n                    <span>考点：</span>\r\n                    <div className='content'>\r\n                        {keypoints &&\r\n                            keypoints.map((item, index) => {\r\n                                return (\r\n                                    <Tag key={index} color='#108ee9'>\r\n                                        {item.name}\r\n                                    </Tag>\r\n                                )\r\n                            })}\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <span>来源：</span>\r\n                    <div className='content'>{source}</div>\r\n                </li>\r\n                <li>\r\n                    <span>统计：</span>\r\n                    <div className='content'>\r\n                        <Tag color='green'>\r\n                            正确率：{questionMeta.correctRatio.toFixed(2)}%\r\n                        </Tag>\r\n                        <Tag color='magenta'>\r\n                            易错项：\r\n                            {\r\n                                mapIndexToLetter[\r\n                                    questionMeta.mostWrongAnswer.choice\r\n                                ]\r\n                            }\r\n                        </Tag>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <span>题号：</span>\r\n                    <div className='content'>{id}</div>\r\n                </li>\r\n                <li>\r\n                    <span>笔记：</span>\r\n                    <div onClick={handleClickNotes} className='question-notes'>\r\n                        <div\r\n                            className='html'\r\n                            dangerouslySetInnerHTML={{ __html: notes }}\r\n                        />\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer\r\n","import LC from './index'\r\n\r\nexport const getCollectList = questionIds => {\r\n    const query = new LC.Query('Collection')\r\n    // query.descending('createdAt')\r\n    query.limit(1000)\r\n    if (questionIds) {\r\n        query.containedIn('id', questionIds)\r\n    }\r\n    return query.find()\r\n}\r\n\r\nexport const addCollect = data => {\r\n    const list = []\r\n    data.forEach(item => {\r\n        const Question = LC.Object.extend('Collection')\r\n        const question = new Question()\r\n        Object.keys(item).forEach(key => {\r\n            question.set(key, item[key])\r\n        })\r\n        list.push(question)\r\n    })\r\n    return LC.Object.saveAll(list)\r\n}\r\n\r\n// delete\r\nexport const deleteCollect = objectId => {\r\n    const question = LC.Object.createWithoutData('Collection', objectId)\r\n    return question.destroy()\r\n}\r\n","// 收藏组件\r\nimport React from 'react'\r\nimport './CollectIcon.scss'\r\n\r\nconst CollectIcon = props => {\r\n    const { checked } = props\r\n    const url = checked\r\n        ? 'https://nodestatic.fbstatic.cn/weblts_spa_online/tiku/static/collected-btn.d4120fd14a7eda0e8e50.png'\r\n        : 'https://nodestatic.fbstatic.cn/weblts_spa_online/tiku/static/collect-btn.e0cca1095b2514b3e6c5.png'\r\n    const handleClick = () => {\r\n        props.onClick && props.onClick()\r\n    }\r\n    return (\r\n        <span onClick={handleClick} className='collect-icon'>\r\n            <img src={url} alt='' />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default CollectIcon\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { message, Modal, Skeleton } from 'antd'\r\nimport classNames from 'classnames'\r\nimport {\r\n    getCategoryQuestion,\r\n    getQuestionList,\r\n    updateQuestionNotes,\r\n} from '../../service/question'\r\nimport './XingCe.scss'\r\nimport { useParams } from 'react-router-dom'\r\nimport Answer from './components/Answer'\r\nimport { getBookList, getExamList } from '../../service/exam'\r\nimport CollectIcon from './components/CollectIcon'\r\nimport { Editor } from '@tinymce/tinymce-react'\r\nimport {\r\n    addCollect,\r\n    deleteCollect,\r\n    getCollectList,\r\n} from '../../service/collect'\r\n\r\n/**\r\n */\r\nconst XingCeList = () => {\r\n    const editorRef = useRef(null)\r\n    const params = useParams()\r\n    const [activeNotes, setActiveNotes] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [categoryList, setCategoryList] = useState([])\r\n    const [collectMap, setCollectMap] = useState({})\r\n    const [dataSource, setDataSource] = useState([])\r\n    useEffect(() => {\r\n        getCategoryQuestion().then(res => {\r\n            const data = res.toJSON().content\r\n            setCategoryList(data)\r\n        })\r\n\r\n        getCollect()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const getQuestionIds = (data, id, callback) => {\r\n            for (let i = 0; i < data.length; i++) {\r\n                const item = data[i]\r\n                if (item.id == id) {\r\n                    callback(item.questionIds)\r\n                    return\r\n                }\r\n                if (item.children) {\r\n                    getQuestionIds(item.children, id, callback)\r\n                }\r\n            }\r\n        }\r\n        const id = params.objectId\r\n        if (id.includes(',')) {\r\n            getQuestions()\r\n        } else {\r\n            if (categoryList.length > 0) {\r\n                let questionIds = ''\r\n                getQuestionIds(categoryList, id, res => {\r\n                    questionIds = res\r\n                })\r\n                if (questionIds) {\r\n                    getQuestionList(questionIds).then(res => {\r\n                        const data = res.map(item => item.toJSON())\r\n                        setDataSource(data)\r\n                    })\r\n                } else {\r\n                    message.error('题目不存在')\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const getQuestions = () => {\r\n        const getAllData = async questionIds => {\r\n            const examData = await getExamList(questionIds)\r\n            const questionData = await getQuestionList(questionIds)\r\n            const bookData = await getBookList(questionIds)\r\n            const data = [\r\n                ...examData.map(item => item.toJSON()),\r\n                ...questionData.map(item => item.toJSON()),\r\n                ...bookData.map(item => item.toJSON()),\r\n            ]\r\n            const result = []\r\n            questionIds.forEach(qId => {\r\n                const question = data.find(item => item.id === qId)\r\n                if (question) {\r\n                    result.push(question)\r\n                }\r\n            })\r\n            return result\r\n        }\r\n        const id = params.objectId\r\n        const questionIds = id\r\n            .split(',')\r\n            .filter(item => item != '')\r\n            .map(item => parseInt(item))\r\n\r\n        setLoading(true)\r\n        getAllData(questionIds)\r\n            .then(res => {\r\n                setDataSource(res)\r\n                setLoading(false)\r\n            })\r\n            .catch(err => {\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const getCollect = () => {\r\n        getCollectList().then(res => {\r\n            const data = res.map(item => item.toJSON())\r\n            const newMap = {}\r\n            data.forEach(item => {\r\n                newMap[item.id] = item.objectId\r\n            })\r\n            setCollectMap(newMap)\r\n        })\r\n    }\r\n\r\n    const handleSelectOption = (item, index) => {\r\n        const choice = item.correctAnswer.choice\r\n        const questionId = item.id\r\n        let status = ''\r\n        if (choice == index) {\r\n            status = 'correct'\r\n        } else {\r\n            status = 'wrong'\r\n        }\r\n        const newDataSource = dataSource.map(item => {\r\n            if (item.id === questionId) {\r\n                return {\r\n                    ...item,\r\n                    answerVisible: true,\r\n                    status,\r\n                    selectIndex: index,\r\n                }\r\n            } else {\r\n                return item\r\n            }\r\n        })\r\n        setDataSource(newDataSource)\r\n    }\r\n\r\n    const handleClose = item => {\r\n        const questionId = item.id\r\n        const newDataSource = dataSource.map(item => {\r\n            if (item.id === questionId) {\r\n                return {\r\n                    ...item,\r\n                    answerVisible: false,\r\n                    status: '',\r\n                    selectIndex: '',\r\n                }\r\n            } else {\r\n                return item\r\n            }\r\n        })\r\n        setDataSource(newDataSource)\r\n    }\r\n\r\n    const handleCollect = (item, checked) => {\r\n        if (checked) {\r\n            // 取消收藏\r\n            const objectId = collectMap[item.id]\r\n            console.log('objectId', objectId)\r\n            deleteCollect(objectId)\r\n                .then(() => {\r\n                    message.success('取消收藏')\r\n                    getCollect()\r\n                })\r\n                .catch(err => {\r\n                    message.error('取消失败')\r\n                })\r\n        } else {\r\n            // 点击收藏\r\n            addCollect([{ id: item.id }])\r\n                .then(() => {\r\n                    //\r\n                    message.success('收藏成功')\r\n                    getCollect()\r\n                })\r\n                .catch(err => {\r\n                    message.error('收藏失败')\r\n                })\r\n        }\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        const content = editorRef.current.getContent()\r\n        // 更新看看\r\n        console.log('activeNotes.objectId', activeNotes.id)\r\n        updateQuestionNotes(activeNotes.id, content)\r\n            .then(res => {\r\n                message.success('更新成功')\r\n                getQuestions()\r\n                setIsModalVisible(false)\r\n            })\r\n            .catch(err => {\r\n                message.success('更新失败')\r\n            })\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleNotesChange = data => {\r\n        const { notes, objectId, id } = data\r\n        setActiveNotes({\r\n            id: objectId,\r\n            notes,\r\n        })\r\n        console.log('data', data)\r\n        setIsModalVisible(true)\r\n        editorRef.current.setContent(notes || '')\r\n    }\r\n    const getAnswer = (left, stringArr) => {\r\n        const answer = dataSource.map(\r\n            item => parseInt(item.correctAnswer.choice) + 1\r\n        )\r\n\r\n        let pos = 0\r\n        let count = 0\r\n        let wrong = []\r\n        let qIds = []\r\n        let arr = stringArr.split('').filter(item => item != ' ')\r\n        if (\r\n            arr.includes('A') ||\r\n            arr.includes('B') ||\r\n            arr.includes('C') ||\r\n            arr.includes('D')\r\n        ) {\r\n            arr = arr.map(item => item.charCodeAt() - 64)\r\n            console.log('arr', arr)\r\n        }\r\n        for (let i = left; i < arr.length + left; i++) {\r\n            const item = answer[i]\r\n            const p = arr[pos]\r\n            pos++\r\n            if (item == p) {\r\n                count++\r\n            } else {\r\n                wrong.push(i + 1)\r\n                qIds.push(dataSource[i].id)\r\n            }\r\n        }\r\n        console.log('正确率：', parseInt((count * 100) / arr.length))\r\n        console.log('错题：', wrong.join(', '))\r\n        console.log('题号：', qIds.join(', '))\r\n    }\r\n    window.getAnswer = getAnswer\r\n\r\n    return (\r\n        <div className='wrap'>\r\n            <h2>错题整理</h2>\r\n            <div className='wrap-print'>\r\n                {loading ? (\r\n                    <Skeleton />\r\n                ) : (\r\n                    <div className='list'>\r\n                        {dataSource.map((item, index) => {\r\n                            let layout = 'four'\r\n                            // 任一选项文字长度超过10，则选择两栏布局\r\n                            // 任一选项文字长度超过20，则选择一栏布局\r\n                            // 否则使用四栏布局\r\n                            const itemLength = []\r\n                            item.accessories[0].options.forEach(item => {\r\n                                itemLength.push(item.length)\r\n                            })\r\n                            const len = Math.max(...itemLength)\r\n                            if (len >= 20) {\r\n                                layout = 'one'\r\n                            } else if (len > 10) {\r\n                                layout = 'two'\r\n                            }\r\n                            const cls = classNames({\r\n                                question: true,\r\n                                [item.status]: item.status,\r\n                            })\r\n                            return (\r\n                                <div key={item.id} className='item'>\r\n                                    <div className={cls}>\r\n                                        <span>{index + 1}.</span>\r\n                                        <div className='content'>\r\n                                            <div className='title'>\r\n                                                <span\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: item.content,\r\n                                                    }}\r\n                                                ></span>\r\n                                                {item.answerVisible && (\r\n                                                    <CollectIcon\r\n                                                        checked={\r\n                                                            collectMap[item.id]\r\n                                                        }\r\n                                                        onClick={() =>\r\n                                                            handleCollect(\r\n                                                                item,\r\n                                                                collectMap[\r\n                                                                    item.id\r\n                                                                ]\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <div\r\n                                                className={`options ${layout}`}\r\n                                            >\r\n                                                {item.accessories[0] &&\r\n                                                    item.accessories[0].options.map(\r\n                                                        (option, pos) => {\r\n                                                            const mapIndexToLetter =\r\n                                                                [\r\n                                                                    'A',\r\n                                                                    'B',\r\n                                                                    'C',\r\n                                                                    'D',\r\n                                                                ]\r\n                                                            let status =\r\n                                                                pos ==\r\n                                                                    item.selectIndex &&\r\n                                                                item.status ==\r\n                                                                    'correct'\r\n                                                                    ? 'correct'\r\n                                                                    : 'wrong'\r\n                                                            const optionCls =\r\n                                                                classNames({\r\n                                                                    option: true,\r\n                                                                    [status]:\r\n                                                                        pos ===\r\n                                                                        item.selectIndex,\r\n                                                                })\r\n                                                            return (\r\n                                                                <div\r\n                                                                    key={pos}\r\n                                                                    onClick={() =>\r\n                                                                        handleSelectOption(\r\n                                                                            item,\r\n                                                                            pos\r\n                                                                        )\r\n                                                                    }\r\n                                                                    className={\r\n                                                                        optionCls\r\n                                                                    }\r\n                                                                >\r\n                                                                    <span className='num'>\r\n                                                                        {\r\n                                                                            mapIndexToLetter[\r\n                                                                                pos\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        .\r\n                                                                    </span>\r\n                                                                    <span\r\n                                                                        dangerouslySetInnerHTML={{\r\n                                                                            __html: option,\r\n                                                                        }}\r\n                                                                    ></span>\r\n                                                                </div>\r\n                                                            )\r\n                                                        }\r\n                                                    )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    {item.answerVisible && (\r\n                                        <Answer\r\n                                            onChange={handleNotesChange}\r\n                                            onClose={() => handleClose(item)}\r\n                                            data={item}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Modal\r\n                forceRender={true}\r\n                width={1000}\r\n                title='编辑笔记'\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n                <Editor\r\n                    className='notes-editor'\r\n                    onInit={(evt, editor) => {\r\n                        setLoading(false)\r\n                        editorRef.current = editor\r\n                    }}\r\n                    apiKey='24p0l3ih7zoyefn7sj47oxgrjz14zp69vuiyxo9tzk25oapj'\r\n                    init={{\r\n                        height: 500,\r\n                        menubar: false,\r\n                        plugins: [\r\n                            'advlist',\r\n                            'autolink',\r\n                            'lists',\r\n                            'link',\r\n                            'image',\r\n                            'charmap',\r\n                            'anchor',\r\n                            'searchreplace',\r\n                            'visualblocks',\r\n                            'code',\r\n                            'fullscreen',\r\n                            'insertdatetime',\r\n                            'media',\r\n                            'table',\r\n                            'preview',\r\n                            'help',\r\n                            'wordcount',\r\n                        ],\r\n                        toolbar:\r\n                            'undo redo | blocks | ' +\r\n                            'bold italic forecolor | alignleft aligncenter ' +\r\n                            'alignright alignjustify | bullist numlist outdent indent | ' +\r\n                            'removeformat | help',\r\n                        content_style:\r\n                            'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\r\n                    }}\r\n                />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default XingCeList\r\n","import LC from 'leancloud-storage'\r\n\r\n// leanCloud 初始化\r\nLC.init({\r\n    appId: 'zhG78X78KsJ4MuyLquDrtexj-gzGzoHsz',\r\n    appKey: 'QhcOlKH32P32CCaEUbzJJWbo',\r\n    serverURL: 'https://zhg78x78.lc-cn-n1-shared.com',\r\n})\r\n\r\n// 封装增删改查的函数\r\n\r\nclass Util {\r\n    // get查询\r\n    get(options) {\r\n        const { tableName, objectId } = options\r\n        const query = new LC.Query(tableName)\r\n        if (objectId) return query.get(objectId)\r\n        else {\r\n            query.limit(1000)\r\n            return query.find()\r\n        }\r\n    }\r\n}\r\n\r\nexport default LC\r\n"],"sourceRoot":""}